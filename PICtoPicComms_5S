'****************************************************************                                      *
'*  Start Date    : 4/13/2011                                   *
'*  Complete Date :                                             *                                                  *
'****************************************************************
'This code is for testing out the features needed for setting up
'PIC-to-PIC (PtP) serial network.  This Slave(S) PIC code(PICtoPIC_3S) requires
'the Master(M) PIC code (PICtoPIC_3M) to be paired up with it.  This code provides
'nominal timing, link status tracking, and two-way link from Master to Slave and return.
'
'(NC) Not Critical Code for general PtP
'
'Ser2_1_Status is used to indicate PtP communication status.
'Initial/reset state-->     M's and S's        Ser2_1_Status=%00000000
'Step 0:PtP link called     M's and S's        Ser2_1_Status=%00000001
'Step 1:M set M.DO                          M->Ser2_1_Status=%00000011  
'       S received M.DO                     S->Ser2_1_Status=%00000011
'Step 2:S set S.DO                          S->Ser2_1_Status=%00000111 
'       M received S.DO                     M->Ser2_1_Status=%00000111    
'Step 3:M sent data (M->S)                  M->Ser2_1_Status=%00001111  
'       S received data                     S->Ser2_1_Status=%00001111
'Step 4:S clear S.DO                        S->Ser2_1_Status=%00011111
'       M verified cleared S.DO             M->Ser2_1_Status=%00011111
'Step 5:M clears M.DO                       S->Ser2_1_Status=%00111111
'       S verified cleared M.DO             M->Ser2_1_Status=%00111111
'Step 6:S sent data  (S->M)                 S->Ser2_1_Status=%01111111
'       M received data                     M->Ser2_1_Status=%01111111
'
'Any faults during PtP link,                Ser2_1_Status.7=1

'''''DEFINES
''''Oscillator
DEFINE OSC 16
''''DEBUG
DEFINE DEBUG_BIT 4          'PortB.4-Serial Debug-Trasnmit
DEFINE DEBUGIN_BIT 5        'PortB.5-Serial Debug-Receive
'DEFINE DEBUG_PACING 100     'Not really needed unless timing there's timing issues
DEFINE DEBUG_BAUD 19200     '
DEFINE DEBUG_MODE 1         'Inverted, for RS232 connection
DEFINE DEBUGIN_MODE 1       'Inverted, for RS232 connection
DEfine DEBUG_REG PORTB      '
DEfine DEBUGIN_REG PORTB    '
''''Serial2
DEFINE SER2_BITS 8          'Serial2 is based on 8 bits of data (standard UART)

'''''REGISTERS
''''For General Use
TRISB.6=0       'PORTB.6 for LED pin out

''''For Serial needs (Debug and PtP)
'''Turn off analog channels for using digital
ANSELB=0        'PortB used for debugging
ANSELD.0=0      'PortD.0-4 used for PtP links
ANSELD.1=0
ANSELD.2=0
ANSELD.3=0 
'''Set digital channel directions
TRISB.4=0       'PortB.4 for debug out serial          
TRISD.0=0       'PortD.0 for PtP link serial out
TRISD.1=1       'PortD.1 for PtP link serial in
TRISD.2=0       'PortD.2 for PtP link digital trigger out
TRISD.3=1       'PortD.2 for PtP link digital trigger in 

'''''VARIABLES
'''Indices
i                var byte
index            var byte
''''PtP Link Variables
'''PtP Indices
Ser2_i           var word   'PtP related index variables
Ser2_j           var word   'PtP related index variables
'''PtP Serial2 Variables
Ser2_Mode_1      var word   'PtP Serial2 Mode Variable
Ser2_Status_1    var byte   'PtP Link Status Variable
Ser2_DI_Sum_1    var byte   'PtP Input trigger sum

'''IDP Protocol
IDP_Dummy           var byte[224]  '224 Bytes of Dummy for IDP Data TEsts
IDP_Header_TX       var byte[16]
IDP_Header_RX       var byte[16]
IDP_Data_TX         var BYTE[224]  '240 Bytes for Serial Return Buffer
IDP_Data_RX         var BYTE[224]  '240 Bytes for Serial Received Buffer
IDP_DataLength_TX   var word       'Data Length nominally 224 bytes max, down to zero.
IDP_FileNumber_TX   var long       'Two's complement, no negative values in use.
IDP_PageNumber_TX   var word       'Page Number




'''''Alias
''''Indicators
LED           var PORTB.6   'Run Indicator
''''PtP Serial 2 Aliases
Ser2_TX_1     var PORTD.0   'PtP Transmit
Ser2_RX_1     var PORTD.1   'PtP Receive
Ser2_DO_1     var PORTD.2   'PtP Trigger Output
Ser2_DI_1     var PORTD.3   'PtP Trigger Input


'''''Initialization
LED=1                   'Indicates PIC is on
Gosub Ser2_Initiate     'Readies Ser2 input/output pins
'''Serial2 Setups, must be in the order shown
Ser2_Mode_1=32          'Set Baud Rate (test 32->19200bps;operate 0->50000bps)
Ser2_Mode_1.13=0        'No parity (default)
Ser2_Mode_1.14=1        'Inverted
Ser2_Mode_1.15=0        'Driven (default), meaning only 1 device connected


'''IDP Protocol 
''First load dummy data into "IDP_Packet_TX"
arraywrite IDP_Dummy,["The ARKSAT-2 is a 2U cubesat, 10cm x 10cm x 22.7 cm, developed at the University of Arkansas, and  manifested on a Northrop Grumman Antares (NG-17) rocket launching out of NASA Wallops Island as part of NASA's 8th Cubesat L.",0]
''TX Initializations
'IDP_Header_TX[0]=64     'Start Sync=64, "@"
'IDP_Header_TX[1]=1      'Source ID=1, OBC
'IDP_Header_TX[2]=0      'Data Type.Mode
'IDP_Header_TX[3]=0      'Data Type.Formats

'IDP_DataLength_TX=224   'Data Length nominally 224 bytes (maximum, can be be variable to reduce time)
'IDP_Header_TX[4]=IDP_DataLength_TX.byte0    'Byte0 of IDP_DataLength_TX word.    
'IDP_Header_TX[5]=IDP_DataLength_TX.byte1    'Byte1 of IDP_DataLength_TX word, nominaly zero.     

'IDP_FileNumber_TX=0      'File Number
'IDP_Header_TX[6]=IDP_FileNumber_TX.byte0    'Byte 0 of File Number
'IDP_Header_TX[7]=IDP_FileNumber_TX.byte1    'Byte 1 of File Number
'IDP_Header_TX[8]=IDP_FileNumber_TX.byte2    'Byte 2 of File Number
'IDP_Header_TX[9]=IDP_FileNumber_TX.byte3    'Byte 3 of File Number

'IDP_PageNumber_TX=0     'Page Number
'IDP_Header_TX[10]=IDP_PageNumber_TX.byte0     'Byte 0 of Page Number
'IDP_Header_TX[11]=IDP_PageNumber_TX.byte1     'Byte 1 of Page Number

'IDP_Header_TX[12]=0      'Status Checking Byte
'IDP_Header_TX[13]=0      'Reserve Byte0
'IDP_Header_TX[14]=0      'Reserve Byte1
'IDP_Header_TX[15]=33    'End Sync=64, "!"

'arrayread IDP_Dummy,[str IDP_DATA_TX\224]   'Move dummy values into data array
                                            'For testing purpses, can also use for loops






index=0
Debug "reset. index=",dec index, 13,10


'''''test code
Main:

LED=1                   '(NC)Status indicator light
index=index+1           '(NC)Index number to demonstrate that the returned data is updated

Gosub Ser2_Initiate     'Initiate/Reset Ser2

gosub Ser2_DI_CK        '(PtP_step1) Slave checks for master PtP initiation trigger.


if Ser2_Status_1.1=1 then
    gosub ser2_DO_TRG       '(PtP_step2) Slave set trigger response.
    gosub Ser2_RX           '(PtP_step3) Slave receive data from master.
    LED=0                   '(NC)Status indicator light
''''''''''Acting on Received codes, make sure timing is accounted for    
    arrayread IDP_DATA_RX,[str IDP_DATA_TX\224]        'Move Received data into return data
    arrayread IDP_Header_RX,[str IDP_Header_TX\16]     'Move Received header into return header
    'Debug str IDP_Header_TX\16, 13,10
    
''''''''''            
    gosub Ser2_DO_unTRG     '(PtP_step4) Slave clears trigger response.
    gosub Ser2_DI_unCK      '(PtP_step5) Slave checks master cleared trigger before transmit returns
    
    'IDP_Data_TX[223]=index  'Test transmit index value
    
    gosub Ser2_Tx           '(PtP_step6) Slave returns data.
    Ser2_Status_1.6=1       '(PtP_step6) Completed PtP Link 
    'if Ser2_Status_1.7=1 then Ser2_1_Ends      'If receive is incomplete
    
    'Debug "I=", dec index," ",str test_array\240, 13,10 'comment out in operational mode.
    'Debug "I=", dec index," ",str test_array\3, test_array[239], 13,10 'comment out in operational mode.
    Debug "Values: ",dec3 IDP_Header_RX[0]," ",dec3 IDP_Header_RX[1]," ",dec3 IDP_Header_RX[4]," ",dec3 IDP_Header_RX[5] 
    Debug "I=", dec index, 13,10 'comment out in operational mode.
    
else
    LED=0                   '(NC)Status indicator light
    Debug "DNR.I=", dec index," ", 13,10    'comment out in operational mode.
    goto Main
endif

Ser2_1_Ends:

goto Main

'''''Subroutines''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''
Ser2_Initiate:
    Ser2_DO_1=0                 'DO pins set to low
    Ser2_Status_1=0             'Link status bits reset
return

Ser2_DO_TRG:
      Ser2_DO_1=1
      Ser2_Status_1.2=1         'Flag link status pin
return


Ser2_DI_CK:     'Check Trigger Input as Initial Response from Master
    
    Ser2_Status_1.0=1    'Flag link status pin, link process started.
    for ser2_j=1 to 1000                               'perform 100 check loops, 10ms
                                                        'Change this value for timing adjust
        Ser2_DI_Sum_1=0
        For ser2_i=1 to 10                            'each check loop takes ~0.1ms
            Ser2_DI_Sum_1=Ser2_DI_Sum_1+Ser2_DI_1
            pauseus 1
        next ser2_i
    
        if Ser2_DI_Sum_1=10 then
            Ser2_Status_1.1=1    'Flag link status pin
            goto end_of_Ser2_DI_CK
        else
            Ser2_Status_1.1=0       'Bit 1=0, DI not confirmed
        endif
    next ser2_j
        
end_of_Ser2_DI_CK:
REturn

Ser2_RX:        'Receive Data from Master
        serin2 Ser2_RX_1,Ser2_Mode_1,1,Ser2_RX_1_Timeout,[str IDP_Header_RX\15]
        
        if IDP_Header_RX[4]>0 then
        
        For ser2_i=0 to (IDP_Header_RX[4]-1)
            serin2 Ser2_RX_1,Ser2_Mode_1,1,Ser2_RX_1_Timeout,[IDP_Data_TX[ser2_i]]       
        next Ser2_i
        
        endif
        'serin2 Ser2_RX_1,Ser2_Mode_1,1,Ser2_RX_1_Timeout,[str IDP_Data_RX\IDP_Header_RX[4]]
        
        serin2 Ser2_RX_1,Ser2_Mode_1,1,Ser2_RX_1_Timeout,[IDP_Header_RX[15]]
        Ser2_Status_1.3=1   'Slave received data  
        goto Ser2_RX_1_completed

    Ser2_RX_1_Timeout:        
        Ser2_Status_1.7=1   'Did not complete Receive         
    Ser2_RX_1_completed:
        
return

Ser2_DO_unTRG:
      Ser2_DO_1=0
      'Ser2_Status_1.4=1         'Flag link status pin
return

Ser2_DI_unCK:     'Check Trigger Input as Initial Response from Slave
    
    for ser2_j=1 to 1000                              'perform 100 check loops, 10ms
        Ser2_DI_Sum_1=0
        For ser2_i=1 to 10                            'each check loop takes ~0.1ms
            Ser2_DI_Sum_1=Ser2_DI_Sum_1+Ser2_DI_1
            pauseus 1
        next ser2_i
    
        if Ser2_DI_Sum_1=0 then
            Ser2_Status_1.4=1    'Bit 4=1, unDI confirmed
            goto end_of_Ser2_DI_unCK
        else
            Ser2_Status_1.4=0       'Bit 4=0, unDI not confirmed
        endif
    next ser2_j
        
end_of_Ser2_DI_unCK:
REturn

Ser2_TX:        'Transmit Data to Master
        serout2 Ser2_TX_1,Ser2_Mode_1,[str IDP_Header_TX\15]
        
        if IDP_Header_TX[4]>0 then
        
        For ser2_i=0 to (IDP_Header_TX[4]-1)
            serout2 Ser2_TX_1,Ser2_Mode_1,[IDP_Data_TX[ser2_i]]
        next Ser2_i
        
        endif
        
        'serout2 Ser2_TX_1,Ser2_Mode_1,[str IDP_Data_TX\(IDP_Header_TX[4])]
        
        serout2 Ser2_TX_1,Ser2_Mode_1,[IDP_Header_TX[15], 13, 10]
        Ser2_Status_1.5=1    'Slave Transmitted Data.
return




